/**
 * Wrapper Script Generator
 * Generates platform-specific wrapper scripts for securely using Hugging Face API tokens
 */

const fs = require('fs');
const os = require('os');
const path = require('path');

/**
 * Generates platform-specific wrapper scripts for HF token usage
 */
class WrapperScriptGenerator {
  /**
   * Generate a wrapper script for the current platform
   * @param {string} configPath - Path to the Claude Desktop config file
   * @returns {string} Path to the generated script
   */
  generateScript(configPath) {
    const platform = os.platform();
    
    if (platform === 'darwin' || platform === 'linux') {
      return this.generateUnixScript(configPath);
    } else if (platform === 'win32') {
      return this.generateWindowsScript(configPath);
    } else {
      throw new Error(`Unsupported platform: ${platform}`);
    }
  }
  
  /**
   * Generate a UNIX (macOS/Linux) wrapper script
   * @param {string} configPath - Path to the Claude Desktop config file
   * @returns {string} Path to the generated script
   */
  generateUnixScript(configPath) {
    const scriptPath = path.join(os.homedir(), 'hf_wrapper.sh');
    
    const scriptContent = `#!/bin/bash
# Hugging Face API token wrapper - generated by MCP Config App

# Determine platform
platform="$(uname -s)"

# Get token from secure storage
if [ "$platform" = "Darwin" ]; then
  # macOS
  export HF_TOKEN=$(security find-generic-password -s "HuggingFaceToken" -w 2>/dev/null)
else
  # Linux
  if command -v secret-tool &> /dev/null; then
    export HF_TOKEN=$(secret-tool lookup service huggingface token api 2>/dev/null)
  elif [ -f "$HOME/.config/huggingface/token" ]; then
    export HF_TOKEN=$(cat "$HOME/.config/huggingface/token")
  fi
fi

# Check if token retrieval succeeded
if [ -z "$HF_TOKEN" ]; then
  echo "Error: Could not retrieve Hugging Face API token from secure storage."
  echo "Please set up your token in the MCP Config App first."
  exit 1
fi

# Launch the MCP server with the token as an environment variable
npx @llmindset/mcp-hfspace
`;
    
    fs.writeFileSync(scriptPath, scriptContent, { mode: 0o755 }); // Make executable
    return scriptPath;
  }
  
  /**
   * Generate a Windows wrapper script
   * @param {string} configPath - Path to the Claude Desktop config file
   * @returns {string} Path to the generated script
   */
  generateWindowsScript(configPath) {
    const scriptPath = path.join(os.homedir(), 'hf_wrapper.ps1');
    
    const scriptContent = `# Hugging Face API token wrapper - generated by MCP Config App

# Try to retrieve the token from secure storage
try {
  # First try Windows Credential Manager if running in PowerShell
  try {
    $cred = Get-StoredCredential -Target "HuggingFaceToken"
    if ($cred) {
      $env:HF_TOKEN = $cred.GetNetworkCredential().Password
    }
  } catch {
    # Fall back to encrypted file storage
    $secureFilePath = "$env:USERPROFILE\\.hf_token_secure.txt"
    if (Test-Path $secureFilePath) {
      $secureString = Get-Content $secureFilePath | ConvertTo-SecureString
      $BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secureString)
      $env:HF_TOKEN = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)
      [System.Runtime.InteropServices.Marshal]::ZeroFreeBSTR($BSTR)
    }
  }
  
  if ([string]::IsNullOrEmpty($env:HF_TOKEN)) {
    throw "Empty token retrieved"
  }
} catch {
  Write-Error "Error: Could not retrieve Hugging Face API token from secure storage."
  Write-Error "Please set up your token in the MCP Config App first."
  exit 1
}

# Launch the MCP server
npx @llmindset/mcp-hfspace
`;
    
    fs.writeFileSync(scriptPath, scriptContent);
    return scriptPath;
  }
  
  /**
   * Update the Claude Desktop config file to use the wrapper script
   * @param {string} configPath - Path to the Claude Desktop config file
   * @param {string} scriptPath - Path to the generated wrapper script
   */
  updateConfigFile(configPath, scriptPath) {
    // Make sure the config file exists
    if (!fs.existsSync(configPath)) {
      const defaultConfig = { mcpServers: {} };
      fs.writeFileSync(configPath, JSON.stringify(defaultConfig, null, 2));
    }
    
    const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    
    if (!config.mcpServers) {
      config.mcpServers = {};
    }
    
    // Update the config to use the wrapper script
    config.mcpServers.hfspace = {
      command: scriptPath,
      args: []
    };
    
    fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
    console.log(`Updated config file ${configPath} to use wrapper script ${scriptPath}`);
  }
}

module.exports = new WrapperScriptGenerator();
