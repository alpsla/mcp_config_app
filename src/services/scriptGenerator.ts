import { Platform } from '../utils/platform';

/**
 * Service to generate platform-specific wrapper scripts
 * for secure token handling in MCP configurations
 */
export class ScriptGenerator {
  /**
   * Generates a platform-specific wrapper script for Hugging Face integration
   * @param modelId The Hugging Face model ID
   * @param tokenKeyName The key name used in secure storage
   * @returns Script content as string
   */
  static generateHuggingFaceScript(modelId: string, tokenKeyName: string = 'HFToken'): string {
    if (Platform.isWindows()) {
      return this.generateWindowsScript(modelId, tokenKeyName);
    } else {
      return this.generateUnixScript(modelId, tokenKeyName);
    }
  }

  /**
   * Generates a PowerShell script for Windows
   * @param modelId The Hugging Face model ID
   * @param tokenKeyName The key name used in secure storage
   * @returns PowerShell script content
   */
  private static generateWindowsScript(modelId: string, tokenKeyName: string): string {
    return `
# Hugging Face MCP Wrapper Script
# Generated by MCP Configuration Tool

# Retrieve token from Windows Credential Manager
$credential = Get-StoredCredential -Target "${tokenKeyName}"
if ($null -eq $credential) {
    Write-Error "API token not found in Windows Credential Manager. Please configure it in the MCP Configuration Tool."
    exit 1
}

# Set environment variable for API token
$env:HF_TOKEN = $credential.GetNetworkCredential().Password

# Run the MCP server with the provided arguments
npx @llmindset/mcp-huggingface --model-id "${modelId}" $args

# Exit with the same code as the MCP server
exit $LASTEXITCODE
`;
  }

  /**
   * Generates a Bash script for macOS/Linux
   * @param modelId The Hugging Face model ID
   * @param tokenKeyName The key name used in secure storage
   * @returns Bash script content
   */
  private static generateUnixScript(modelId: string, tokenKeyName: string): string {
    const isMac = Platform.isMac();
    const tokenRetrievalCommand = isMac
      ? `security find-generic-password -a "$USER" -s "${tokenKeyName}" -w`
      : `secret-tool lookup service huggingface key ${tokenKeyName}`;

    return `#!/bin/bash
# Hugging Face MCP Wrapper Script
# Generated by MCP Configuration Tool

# Retrieve token from keychain/secret service
TOKEN=$(${tokenRetrievalCommand})

if [ -z "$TOKEN" ]; then
    echo "Error: API token not found. Please configure it in the MCP Configuration Tool."
    exit 1
fi

# Set environment variable for API token
export HF_TOKEN="$TOKEN"

# Run the MCP server with the provided arguments
npx @llmindset/mcp-huggingface --model-id "${modelId}" "$@"

# Exit with the same code as the MCP server
exit $?
`;
  }

  /**
   * Saves the generated script to disk
   * @param script The script content
   * @param type The script type identifier
   * @returns Path to the saved script
   */
  static async saveScript(script: string, type: string): Promise<string> {
    // In a real application, this would use Electron's fs API to write to disk
    // For this web demo, we'll just simulate it
    
    const isWindows = Platform.isWindows();
    const scriptDir = isWindows 
      ? `${Platform.getAppDataPath()}\\MCP-Config`
      : `${Platform.getHomePath()}/.mcp-config`;
    
    const scriptName = isWindows
      ? `${type}_wrapper.ps1`
      : `${type}_wrapper.sh`;
    
    const scriptPath = `${scriptDir}/${scriptName}`;
    
    // In a real application:
    // 1. Create directory if it doesn't exist
    // 2. Write script to file
    // 3. Set execute permissions on Unix systems
    
    console.log(`Script would be saved to: ${scriptPath}`);
    console.log(`Script content: ${script.substring(0, 100)}...`);
    
    // For this demo, just return the path
    return scriptPath;
  }
}
