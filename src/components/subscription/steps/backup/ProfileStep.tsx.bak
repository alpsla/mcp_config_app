import React, { useState, useEffect } from 'react';
import '../SubscriptionFlow.css';

interface ProfileStepProps {
  initialData: {
    firstName: string;
    lastName: string;
    displayName: string;
    company: string;
    role: string;
  };
  onNext: (data: any) => void;
  onBack: () => void;
}

const ProfileStep: React.FC<ProfileStepProps> = ({
  initialData,
  onNext,
  onBack
}) => {
  // Safely initialize data with defaults and console log for debugging
  const [profileData, setProfileData] = useState(() => {
    console.log('ProfileStep initializing with data:', initialData);
    return {
      firstName: initialData?.firstName || '',
      lastName: initialData?.lastName || '',
      displayName: initialData?.displayName || '',
      company: initialData?.company || '',
      role: initialData?.role || ''
    };
  });
  
  // Log when initialData changes
  useEffect(() => {
    console.log('ProfileStep initialData changed:', initialData);
    if (initialData) {
      setProfileData({
        firstName: initialData.firstName || profileData.firstName,
        lastName: initialData.lastName || profileData.lastName,
        displayName: initialData.displayName || profileData.displayName,
        company: initialData.company || profileData.company,
        role: initialData.role || profileData.role
      });
    }
  }, [initialData]);

  const [errors, setErrors] = useState<Record<string, string>>({});

  // Handle input change
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setProfileData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error for this field
    if (errors[name]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  };

  // Validate form before submission
  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};
    
    if (!profileData.firstName.trim()) {
      newErrors.firstName = 'First name is required';
    }
    
    if (!profileData.lastName.trim()) {
      newErrors.lastName = 'Last name is required';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Handle next button click
  const handleNext = (e: React.MouseEvent) => {
    e.preventDefault();
    if (validateForm()) {
      onNext(profileData);
    }
  };
  
  // Fix profile step navigation - ensure buttons are displayed
  useEffect(() => {
    // Force buttons to be visible
    const fixButtons = () => {
      const actionContainer = document.querySelector('.step-actions');
      if (actionContainer) {
        console.log('Fixing profile step actions visibility');
        // Force visibility
        actionContainer.classList.add('profile-fixed-buttons');
        actionContainer.setAttribute('style', 'display: flex !important; visibility: visible !important; opacity: 1 !important; position: relative !important; z-index: 9999 !important;');
        
        // Fix the buttons too
        const buttons = actionContainer.querySelectorAll('button');
        buttons.forEach(button => {
          button.setAttribute('style', 'display: inline-block !important; visibility: visible !important; opacity: 1 !important;');
        });
      }
    };
    
    // Apply immediately and after a delay
    fixButtons();
    const timer1 = setTimeout(fixButtons, 500);
    const timer2 = setTimeout(fixButtons, 1500);
    
    return () => {
      clearTimeout(timer1);
      clearTimeout(timer2);
    };
  }, []);

  return (
    <div className="subscription-step">
      <h2>Profile Information</h2>
      <p className="step-description">
        Tell us a bit about yourself to personalize your experience
      </p>

      <form className="subscription-form">
        <div className="form-row">
          <div className="form-group">
            <label htmlFor="firstName">
              First Name <span className="required">*</span>
            </label>
            <input
              type="text"
              id="firstName"
              name="firstName"
              value={profileData.firstName}
              onChange={handleInputChange}
              className={errors.firstName ? 'error' : ''}
              placeholder="Your first name"
            />
            {errors.firstName && (
              <div className="error-message">{errors.firstName}</div>
            )}
          </div>

          <div className="form-group">
            <label htmlFor="lastName">
              Last Name <span className="required">*</span>
            </label>
            <input
              type="text"
              id="lastName"
              name="lastName"
              value={profileData.lastName}
              onChange={handleInputChange}
              className={errors.lastName ? 'error' : ''}
              placeholder="Your last name"
            />
            {errors.lastName && (
              <div className="error-message">{errors.lastName}</div>
            )}
          </div>
        </div>

        <div className="form-group">
          <label htmlFor="displayName">
            Display Name (Optional)
          </label>
          <input
            type="text"
            id="displayName"
            name="displayName"
            value={profileData.displayName}
            onChange={handleInputChange}
            placeholder="How you'd like to be addressed in the app"
          />
          <div className="helper-text">
            This is how we'll address you in the application
          </div>
        </div>

        <div className="form-row">
          <div className="form-group">
            <label htmlFor="company">
              Company (Optional)
            </label>
            <input
              type="text"
              id="company"
              name="company"
              value={profileData.company}
              onChange={handleInputChange}
              placeholder="Your company name"
            />
          </div>

          <div className="form-group">
            <label htmlFor="role">
              Role (Optional)
            </label>
            <input
              type="text"
              id="role"
              name="role"
              value={profileData.role}
              onChange={handleInputChange}
              placeholder="Your role or position"
            />
          </div>
        </div>
      </form>
      
      <div 
        id="profile-buttons-container"
        className="step-actions button-container navigation-buttons"
        style={{ 
          display: 'flex',
          justifyContent: 'space-between',
          gap: '20px',
          marginTop: '30px',
          paddingTop: '20px',
          borderTop: '1px solid #e0e0e0',
          width: '100%',
          position: 'relative',
          zIndex: 1000,
          visibility: 'visible',
          opacity: 1
        }}
      >
        <button 
          id="profile-back-button"
          type="button"
          className="secondary-button button-cancel"
          style={{
            padding: '12px 24px',
            backgroundColor: '#f2f2f2',
            border: '1px solid #ddd',
            borderRadius: '4px',
            cursor: 'pointer',
            fontWeight: 600,
            minWidth: '150px',
            fontSize: '16px',
            display: 'inline-block',
            visibility: 'visible',
            opacity: 1,
            position: 'relative',
            zIndex: 1001
          }}
          onClick={onBack}
        >
          Back
        </button>
        
        <button 
          id="profile-next-button"
          type="button"
          className="primary-button basic button-continue"
          style={{
            padding: '12px 24px',
            backgroundColor: '#4285F4',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            fontWeight: 600,
            boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
            minWidth: '150px',
            fontSize: '16px',
            display: 'inline-block',
            visibility: 'visible',
            opacity: 1,
            position: 'relative',
            zIndex: 1001
          }}
          onClick={handleNext}
        >
          Next
        </button>
      </div>
    </div>
  );
};

export default ProfileStep;
