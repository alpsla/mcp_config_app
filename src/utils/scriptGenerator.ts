import { Platform } from './platform';

/**
 * Utility for generating secure wrapper scripts for API tokens
 */
export class ScriptGenerator {
  /**
   * Generates a platform-specific wrapper script for secure token handling
   * @param scriptType Type identifier for the script (e.g., 'huggingface')
   * @param tokenName Token key name in secure storage
   * @param additionalArgs Additional arguments to pass to the MCP server
   * @returns Script content as string
   */
  static generateTokenWrapperScript(
    scriptType: string,
    tokenName: string,
    additionalArgs: Record<string, any> = {}
  ): string {
    return Platform.isWindows()
      ? this.generateWindowsScript(scriptType, tokenName, additionalArgs)
      : this.generateUnixScript(scriptType, tokenName, additionalArgs);
  }
  
  /**
   * Generates a PowerShell script for Windows
   * @param scriptType Script type identifier
   * @param tokenName Token name in secure storage
   * @param additionalArgs Additional arguments
   * @returns PowerShell script content
   */
  private static generateWindowsScript(
    scriptType: string,
    tokenName: string,
    additionalArgs: Record<string, any>
  ): string {
    const formattedArgs = this.formatCommandArgs(additionalArgs);
    
    return `
# MCP Server Wrapper Script for ${scriptType}
# Generated by MCP Configuration Tool
# This script securely retrieves API tokens and passes them to the MCP server

# Retrieve the API token from Windows Credential Manager
$credential = Get-StoredCredential -Target "${tokenName}"
if ($null -eq $credential) {
    Write-Error "API token not found in Windows Credential Manager. Please configure it in the MCP Configuration Tool."
    exit 1
}

# Set environment variable for the MCP server
$env:API_TOKEN = $credential.GetNetworkCredential().Password

# Run the MCP server with the token available as an environment variable
npx @llmindset/mcp-${scriptType} ${formattedArgs} $args

# Exit with the same code as the MCP server
exit $LASTEXITCODE
`;
  }
  
  /**
   * Generates a Bash script for macOS/Linux
   * @param scriptType Script type identifier
   * @param tokenName Token name in secure storage
   * @param additionalArgs Additional arguments
   * @returns Bash script content
   */
  private static generateUnixScript(
    scriptType: string,
    tokenName: string,
    additionalArgs: Record<string, any>
  ): string {
    const formattedArgs = this.formatCommandArgs(additionalArgs);
    
    // Different token retrieval commands based on platform
    const tokenRetrievalCommand = Platform.isMac()
      ? `security find-generic-password -a "$USER" -s "${tokenName}" -w`
      : `secret-tool lookup service mcp key ${tokenName}`;
    
    return `#!/bin/bash
# MCP Server Wrapper Script for ${scriptType}
# Generated by MCP Configuration Tool
# This script securely retrieves API tokens and passes them to the MCP server

# Retrieve the API token from system keychain/secret storage
TOKEN=$(${tokenRetrievalCommand})

if [ -z "$TOKEN" ]; then
    echo "Error: API token not found in secure storage. Please configure it in the MCP Configuration Tool."
    exit 1
fi

# Set environment variable for the MCP server
export API_TOKEN="$TOKEN"

# Run the MCP server with the token available as an environment variable
npx @llmindset/mcp-${scriptType} ${formattedArgs} "$@"

# Exit with the same code as the MCP server
exit $?
`;
  }
  
  /**
   * Formats command arguments from object
   * @param args Arguments object
   * @returns Formatted argument string
   */
  private static formatCommandArgs(args: Record<string, any>): string {
    return Object.entries(args)
      .map(([key, value]) => {
        // Format the value appropriately based on type
        const formattedValue = typeof value === 'string'
          ? `"${value}"`
          : value;
          
        return `--${key} ${formattedValue}`;
      })
      .join(' ');
  }
  
  /**
   * Gets the appropriate script extension for the current platform
   * @returns Script file extension
   */
  static getScriptExtension(): string {
    return Platform.isWindows() ? '.ps1' : '.sh';
  }
  
  /**
   * Gets the script path for a given script type
   * @param scriptType Script type identifier
   * @returns Full path to script
   */
  static getScriptPath(scriptType: string): string {
    const baseDir = Platform.isWindows()
      ? `${Platform.getAppDataPath()}\\MCP-Config`
      : `${Platform.getHomePath()}/.mcp-config`;
      
    const fileName = `${scriptType}_wrapper${this.getScriptExtension()}`;
    
    return Platform.isWindows()
      ? `${baseDir}\\${fileName}`
      : `${baseDir}/${fileName}`;
  }
}
